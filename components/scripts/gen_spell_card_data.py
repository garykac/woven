#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import getopt
import os
import subprocess
import sys

SPELL_RAW_DATA = "data_spell_cards.tsv"
SPELL_DATA_OUTPUT = "data_spell_cards.py"

CATEGORIES = [
    'mage-move',            # Mage self move
    'mage-move',            # Mage self move bonus
    'mage-defend',          # Mage defend

    'mage-other-move',      # Mage other move
    'mage-other-attack',    # Mage other attack

    'eye-create',           # Eye own create
    'eye-move',             # Eye own move
    'eye-defend',           # Eye own defend

    'eye-other-move',       # Eye other move
    'eye-other-attack',     # Eye other attack

    'thread-recover',       # Thread own recover
    'thread-move',          # Thread own move
    'thread-block',         # Thread other attack
    
    'other',                # Other
]

class GenerateSpellCardData():
    
    def __init__(self):
        pass
                
    def download(self):
        fout = open(SPELL_RAW_DATA, "w")
        cmd = ["curl"]
        cmd.append("-L")
        cmd.append("https://docs.google.com/spreadsheets/d/1fs1T6UTLtIfcSVUMvYIKDgIPsA2io1UyC17HLCkl0lw/export?gid=1131718088&format=tsv")
        subprocess.run(cmd, stdout = fout)
        print()
        
    def desc_info_replace(self, d):
        # Targets
        d = d.replace('{{SELF_OR_TEAMMATE}}', 'Self or teammate')
        d = d.replace('{{EYE}}', 'One of your Eyes')
        d = d.replace('{{EYES}}', 'One or more of your Eyes')
        d = d.replace('{{MAGE_LOCATION}}', 'Your location')
        d = d.replace('{{EYE_LOCATION}}', 'Location where you have an Eye')
        d = d.replace('{{EYE_ENTERS_LOCATION}}', 'An Eye moves into your location')
        d = d.replace('{{SEE_DESC}}', 'See description')
        # When cast
        d = d.replace('{{ADD_CHARGE}}', 'Place a Charge on this spell.')
        # React
        d = d.replace('{{TARGET_HI_MID}}', 'Target is in highlands or midlands')
        # Trigger
        d = d.replace('{{WHEN_ATTACKED}}', 'Target is attacked')
        # Cost
        d = d.replace('{{EYE_SACRIFICE}}', 'Target Eye is sacrificed')
        
        return d

    def write(self, str):
        self.fout.write(str.replace("\t", "    ")+"\n")
    
    def writeHeader(self, version):
        self.write("# Woven spell card data")
        self.write("# DO NOT EDIT - Autogenerated file")
        self.write("")
        self.write(f"spell_card_revision = {version}")
        self.write("")
        self.write("spell_card_categories = [")
        for c in CATEGORIES:
            self.write(f"\t'{c}',")
        self.write("]")
        self.write("")

    def genCategories(self, categories):
        cats = set()
        for i in range(len(categories)):
            if categories[i] == "TRUE":
                cats.add(CATEGORIES[i])
        
        self.write(f"\t\t 'category': '{','.join(cats)}',")

    def generate(self):
        with open(SPELL_DATA_OUTPUT, 'w') as fout:
            self.fout = fout
            with open(SPELL_RAW_DATA, 'r') as fin:
                firstLine = True
                for line in fin:
                    data = line.split('\t')
                    if firstLine:
                        version = data[0]
                        firstLine = False
                        self.writeHeader(version)
                        self.write("spell_card_data = [")
                        continue
                    title = data[0]
                    active = data[1]
                    element = data[2]
                    pattern = '-'.join(data[3:5])
                    patternInfo = data[5:10]
                    categories = data[10:24]
                    team = data[24]
                    (prereq, target, cost, cast, charged, trigger, react, sacrifice, note) = data[25:]
                    note = note.rstrip()
                    if active and pattern != "-":
                        self.write(f"\t[\"{title}\",")
                        extra = ""
                        if team == "TRUE":
                            extra += f" 'companion': True,"
                        self.write(f"\t\t{{'element': '{element.lower()}', 'pattern': '{pattern}',{extra}")
                        self.genCategories(categories)
                        self.write(f"\t\t}}, {{")
                        if prereq:
                            self.write(f"\t\t\t'prereq': \"{prereq}\",")
                        if target:
                            self.write(f"\t\t\t'target': \"{target}\",")
                        if cost:
                            self.write(f"\t\t\t'cost': \"{cost}\",")
                        if cast:
                            if cast.find(';') != -1:
                                self.write(f"\t\t\t'cast': [")
                                for c in cast.split(';'):
                                    self.write(f"\t\t\t\t\"{c}\",")
                                self.write(f"\t\t\t],")
                            else:
                                self.write(f"\t\t\t'cast': \"{cast}\",")
                        if charged:
                            self.write(f"\t\t\t'charged': \"{charged}\",")
                        if trigger:
                            self.write(f"\t\t\t'trigger': \"{trigger}\",")
                        if react:
                            self.write(f"\t\t\t'react': \"{react}\",")
                        if sacrifice:
                            self.write(f"\t\t\t'sacrifice': \"{sacrifice}\",")
                        if note:
                            self.write(f"\t\t\t'note': \"{note}\",")
                        self.write(f"\t\t}} ],")
                        #print(title, pattern, cast)
                self.write("]")
   
def main():
    spellGen = GenerateSpellCardData()
    spellGen.download()
    spellGen.generate()

if __name__ == '__main__':
    main()
